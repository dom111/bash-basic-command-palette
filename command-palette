#!/usr/bin/env bash

# styles
styleReset="$(tput sgr0 2>/dev/null || tput me 2>/dev/null)";
styleListItemStart="$styleReset";           # unselected list item start
styleListItemEnd="$styleReset";             #     "       "    "   end
styleListItemSelectedStart="$(tput rev 2>/dev/null)";   # selected    "    "   start
styleListItemSelectedEnd="$styleReset";     #    "        "    "   end
styleTitleStart="$(tput bold 2>/dev/null || tput md 2>/dev/null)$(tput smul 2>/dev/null || tput us 2>/dev/null)";    # title style start
styleTitleEnd="$styleReset";                # title style end

# templates
listItemPrefix="   ";           # shown before unselected options
listItemSuffix="   ";           #   "   after      "        "
listItemPrefixSelected=" * ";   #   "   before selected     "
listItemSuffixSelected="   ";   #   "   after      "        "
listItemEllipsis="...";         #   "     "   truncated text
titlePrefix="";                 #   "   before the title
titleSuffix="";                 #   "   after   "    "
searchPrefix=" | ";             #   "   before the filter
searchSuffix="";                #   "   after   "    "
# 

# load config
if [[ -f $HOME/.command-palette.conf ]]; then
    source $HOME/.command-palette.conf;
fi

# per invocation options
title="";   # opional title shown on the first line
keepOpen=0; # close the list when $action is called
action="";  # action to run when enter is pressed on list
filter="";  # optionally prefilled filter
args=();    # list items
# 

function usage {
    echo "usage: command-palette [<action>] "\""<list items>"\" >&2;
    echo "  (-a |--action |--action=)<action>   <action>" >&2;
    echo "  (-f |--filter |--filter=)<filter>   Prefill the filter" >&2;
    echo "  -h|--help                           Show this help" >&2;
    echo "  -k|--keep-open                      Keep command-palette open after running <action>" >&2;
    echo "  (-t |--title |--title=)<title>      Add an optional title" >&2;
    exit 1;
};

i=1;

while [[ $i -le $# ]]; do
    arg=${!i};

    if [[ $arg = -* ]]; then
        case $arg in
            -a|--action*)
                if [[ $arg = *=* ]]; then
                    action=(${arg:9});
                else
                    i=$((i+1));
                    action=(${!i});
                fi
                ;;
            -f|--filter*)
                if [[ $arg = *=* ]]; then
                    filter="${arg:9}";
                else
                    i=$((i+1));
                    filter=${!i};
                fi
                ;;
            -h|--help)
                usage;
                exit;
                ;;
            -k|--keep-open)
                keepOpen=1;
                ;;
            -t|--title*)
                if [[ $arg = *=* ]]; then
                    title="${arg:8}";
                else
                    i=$((i+1));
                    title=${!i};
                fi
                ;;
            *)
                args+=("$arg");
                ;;
        esac
    else
        args+=("$arg");
    fi

    i=$((i+1));
done

# if we have multiple arguments, assume that the first is the action
if [[ -z $action ]]; then
    if [[ "${#args[@]}" -gt 1 ]]; then
        action=(${args[0]}); # use an array to support commands with spaces like 'git checkout'
        unset args[0];
    else
        action="echo";
    fi
fi

# vars
escape="";
modifier="";
isPageKey="";
isHomeEnd="";
data=();
filteredData=();
index=0;

for arg in "${args[@]}"; do
    IFS=$'\n' data+=($arg);
done

function _filterData {
    filterGlob="";
    filteredData=();
    i=0;

    while [[ $i -le ${#filter} ]]; do
        filterGlob="${filterGlob}${filter:$((i++)):1}*";
    done

    shopt -s nocasematch;

    for item in "${data[@]}"; do
        if [[ $item = *$filterGlob ]]; then
            filteredData+=($item);
        fi
    done

    if [[ $index -gt $((${#filteredData[@]}-1)) ]]; then
        index=$((${#filteredData[@]}-1));

        if [[ $index -lt 0 ]]; then
            index=0;
        fi
    fi

    # TODO: sort data ascending by length of match
};

function _updateDisplay {
    cols=$(tput cols);
    lines=$(tput lines);

    echo -n "$(tput civis 2>/dev/null || tput vi 2>/dev/null)";

    tput cup 0 0 2>/dev/null;

    if [[ -n $title ]]; then
        echo "${titlePrefix}${styleTitleStart}${title}${titleSuffix}${styleTitleEnd}";
    fi

    _displayFilter;

    if [[ $previousCount != "${#filteredData[@]}" ]] || [[ $oldIndex != $index ]] || [[ -n $2 ]]; then
        _displayList;

        previousCount="${#filteredData[@]}";
        oldIndex=$index;
    fi
};

function _displayFilter {
    echo "$(tput el 2>/dev/null || tput ce 2>/dev/null)${searchPrefix}${filter}${searchSuffix}";
};

# from: https://stackoverflow.com/a/51930257/3145856
function _getCurrentPosition { 
    local pos=() originalState=$(stty -g);
    stty -echo;
    tput u7 2>/dev/null || echo -en "\033[6n";
    IFS='[;' read -rd R -a pos;
    stty $originalState;
    currentRow=${pos[1]};
    currentColumn=${pos[2]};
};

function _displayList {
    # TODO: update less of the screen
    #   work out what needs to be updated, and only clear the screen and update
    #   everything if really necessary
    echo -n "$(tput ed 2>/dev/null || tput cd 2>/dev/null)";

    _getCurrentPosition;
    maxLines=$((lines-currentRow));
    dataToRender=(${filteredData[@]});

    if [[ "${#dataToRender[@]}" -gt $maxLines ]]; then
        startIndex=$((index-(maxLines/2)-1));

        if [[ $startIndex -lt 0 ]]; then
            startIndex=0;
        fi

        endIndex=$((startIndex+maxLines-1));

        if [[ $endIndex -gt ${#filteredData[@]} ]]; then
            endIndex=$((${#filteredData[@]}-1));
        fi

        dataToRender=();
        i=$startIndex;

        while [[ $i -le $endIndex ]]; do
            dataToRender[$i]=${filteredData[$i]};
            i=$((i+1));
        done
    fi

    for i in "${!dataToRender[@]}"; do 
        displayLine="${filteredData[$i]}";
        maxLength=$cols;

        if [[ $i = $index ]]; then
            maxLength=$((maxLength-${#listItemPrefixSelected}-${#listItemSuffixSelected}-${#listItemEllipsis}));
        else
            maxLength=$((maxLength-${#listItemPrefix}-${#listItemSuffix}-${#listItemEllipsis}));
        fi

        if [[ ${#displayLine} -gt $maxLength ]]; then
            displayLine="${displayLine:0:$maxLength}${listItemEllipsis}";
        fi

        if [[ $i = $index ]]; then
            echo "${styleListItemSelectedStart}${listItemPrefixSelected}${displayLine}${listItemSuffixSelected}${styleListItemSelectedEnd}";
        else
            echo "${styleListItemStart}${listItemPrefix}${displayLine}${listItemSuffix}${styleListItemEnd}";
        fi
    done
};

function _setModifiers {
    escape=$1;
    modifier=$2;
    isPageKey=$3;
    isHomeEnd=$4;
};

function cleanup {
    echo -n "$(tput rmcup 2>/dev/null || tput te 2>/dev/null)";
    echo -n "$(tput cnorm 2>/dev/null || tput ve 2>/dev/null)";
};

function _updateFilter {
    if [[ $1 = $'\177' ]]; then
        filter="${filter%?}";
    else
        filter="${filter}$1";
    fi

    _filterData;
};

# main
echo -n "$(tput smcup 2>/dev/null || tput ti 2>/dev/null)";
echo -n "$(tput civis 2>/dev/null || tput vi 2>/dev/null)";
trap cleanup EXIT;

_filterData;
_updateDisplay 1 1;

while read -s -n1 key; do
    # TODO
    # left/right +/- screen width / 2

    case $key in
        $'\e')
            if [[ $escape = "1" ]]; then
                exit 1;
            fi

            _setModifiers 1;
            ;;
        '[')
            if [[ $escape = "1" ]]; then
                _setModifiers 1 1;
            else
                _updateFilter $key;
                _setModifiers;
            fi
            ;;
        A)
            updates="";

            if [[ $escape = "1" && $modifier = "1" ]]; then
                if [[ $index -gt 0 ]]; then
                    index=$((index-1));
                    updates=1;
                else
                    _setModifiers;
                fi
            else
                _updateFilter $key;
                updates=1;
            fi

            if [[ $updates = 1 ]]; then
                _setModifiers;
                _updateDisplay;
            fi
            ;;
        B)
            updates="";

            if [[ $escape = "1" && $modifier = "1" ]]; then
                if [[ $index -lt $((${#filteredData[@]}-1)) ]]; then
                    index=$((index+(index<(${#filteredData[@]}-1))));
                    updates=1;
                else
                    _setModifiers;
                fi
            else
                _updateFilter $key;
                updates=1;
            fi

            if [[ $updates = 1 ]]; then
                _setModifiers;
                _updateDisplay;
            fi
            ;;
        F)
            updates="";

            if [[ $escape = "1" && $isHomeEnd = "1" ]]; then
                if [[ $index -lt $((${#filteredData[@]}-1)) ]]; then
                    index=$((${#filteredData[@]}-1));
                    updates=1;
                else
                    _setModifiers;
                fi
            else
                _updateFilter $key;
                updates=1;
            fi

            if [[ $updates = 1 ]]; then
                _setModifiers;
                _updateDisplay;
            fi
            ;;
        H)
            updates="";

            if [[ $escape = "1" && $isHomeEnd = "1" ]]; then
                if [[ $index -gt 0 ]]; then
                    index=0;
                    updates=1;
                else
                    _setModifiers;
                fi
            else
                _updateFilter $key;
                updates=1;
            fi

            if [[ $updates = 1 ]]; then
                _setModifiers;
                _updateDisplay;
            fi
            ;;
        O)
            if [[ $escape = "1" ]]; then
                _setModifiers 1 "" "" 1;
            else
                _updateFilter $key;
                _setModifiers;
                _updateDisplay;
            fi

            ;;
        1)
            if [[ $escape = "1" && $modifier = "1" ]]; then
                _setModifiers 1 1 "home";
            else
                _updateFilter $key;
                _setModifiers;
                _updateDisplay;
            fi
            ;;
        4)
            if [[ $escape = "1" && $modifier = "1" ]]; then
                _setModifiers 1 1 "end";
            else
                _updateFilter $key;
                _setModifiers;
                _updateDisplay;
            fi
            ;;
        5)
            if [[ $escape = "1" && $modifier = "1" ]]; then
                _setModifiers 1 1 "up";
            else
                _updateFilter $key;
                _setModifiers;
                _updateDisplay;
            fi
            ;;
        6)
            if [[ $escape = "1" && $modifier = "1" ]]; then
                _setModifiers 1 1 "down";
            else
                _updateFilter $key;
                _setModifiers;
                _updateDisplay;
            fi
            ;;
        "~")
            updates="";

            if [[ $escape = "1" && $modifier = "1" ]]; then
                if [[ $isPageKey = up ]]; then
                    if [[ $index -gt 0 ]]; then
                        index=$((index-(lines/2)));
                        updates=1;

                        if [[ $index -lt 0 ]]; then
                            index=0;
                        fi
                    else
                        _setModifiers;
                    fi
                elif [[ $isPageKey = down ]]; then
                    if [[ $index -lt $((${#filteredData[@]}-1)) ]]; then
                        index=$((index+(lines/2)));
                        updates=1;

                        if [[ $index -gt $((${#filteredData[@]}-1)) ]]; then
                            index=$((${#filteredData[@]}-1));
                        fi
                    else
                        _setModifiers;
                    fi
                elif [[ $isPageKey = home ]]; then
                    if [[ $index -gt 0 ]]; then
                        index=0;
                        updates=1;
                    else
                        _setModifiers;
                    fi
                elif [[ $isPageKey = end ]]; then
                    if [[ $index -lt $((${#filteredData[@]}-1)) ]]; then
                        index=$((${#filteredData[@]}-1));
                        updates=1;
                    else
                        _setModifiers;
                    fi
                fi
            else
                _updateFilter $key;
                updates=1;
            fi

            if [[ $updates = 1 ]]; then
                _setModifiers;
                _updateDisplay;
            fi
            ;;
        "")
            if [[ $keepOpen = 0 ]]; then
                trap - EXIT;
                cleanup;
                ${action[@]} "${filteredData[$index]}";
                exit;
            else
                ${action[@]} "${filteredData[$index]}";
                _updateDisplay;
            fi
            ;;
        $'\177')
            if [[ $escape = "1" ]]; then
                filter="";
                _filterData;
            else
                _updateFilter $key;
            fi

            _setModifiers;
            _updateDisplay;
            ;;
        *)
            _updateFilter $key;
            _setModifiers;
            _updateDisplay;
            ;;
    esac;
done;
